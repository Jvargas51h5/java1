import java.util.Random;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jhon Vargas
 */
public class Algoritmo extends javax.swing.JFrame {

    /**
     * Creates new form Algoritmo
     */
    public Algoritmo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textArea1 = new java.awt.TextArea();
        button1 = new java.awt.Button();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla2 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        button2 = new java.awt.Button();
        button3 = new java.awt.Button();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        button1.setActionCommand("Cargar Matriz 1");
        button1.setLabel("Generar Poblacion");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        getContentPane().add(button1, new org.netbeans.lib.awtextra.AbsoluteConstraints(667, 71, -1, -1));
        button1.getAccessibleContext().setAccessibleName("Cargar Poblacion");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("ALGORITMO GENETICO");
        jLabel1.setName(""); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(198, 0, -1, -1));
        jLabel1.getAccessibleContext().setAccessibleName("LABEL");

        tabla2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Orden", "Binario", "Valor", "Emparejamieto", "Corte de Bits"
            }
        ));
        jScrollPane1.setViewportView(tabla2);
        tabla2.getColumnModel().getColumn(4).setHeaderValue("Corte de Bits");

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 224, 571, 159));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Orden", "Binario", "Valor", "Ecuacion", "Emparejamiento"
            }
        ));
        jScrollPane2.setViewportView(tabla);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 35, 571, 159));

        button2.setActionCommand("Cargar Matriz 2");
        button2.setLabel("Generar Ganadores");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });
        getContentPane().add(button2, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 415, -1, -1));

        button3.setActionCommand("Cargar Matriz 2");
        button3.setLabel("Realizar Cortes");
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });
        getContentPane().add(button3, new org.netbeans.lib.awtextra.AbsoluteConstraints(279, 415, 119, -1));

        jButton1.setText("REINICIAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 120, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="collapsed"  desc="Instancias de Clase">
    
    Matriz m = new Matriz();    
    Matriz mat = new Matriz();
    Matriz result =new Matriz();
    int c=0;
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed"  desc="Metodos">
    
    public int mayor(int x,int y)
    {
        if(x>y)
            return x;
        else if(x==y)
            return x;
        else
            return y;
    }
    
    public int porcentaje()
    {
        int res = m.getElem(0, 2);
        res = res * 100 / 127;
        return res;
    }
    
    public boolean vacio(Matriz x)
    {
        if(x.getFil()==0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    public int ConvertBin(int num)
    {
        String bin = "";
        int c = 0;
        while (num > 0)
        {
            if (num % 2 == 0)
            {
                bin = "0" + bin;
            }
            else
            {
                bin = "1" + bin;
            }
            num = num / 2;
            c++;
        }
        while(c<8){
            bin = "0" + bin;
            c++;
        }
        return Integer.parseInt(bin);
    }
    
    public int ConvertDec(int num)
    {
        int potencia = 1;
        int result = 0;
        while(num > 0)
        {
            if(num % 10 == 1)
            {
                
                result = result + potencia; 
            }
            num = num /10;
            potencia = potencia * 2;
        }    
        return result;
    }
    
    public String realizar_corte(int corte,String x,String y)
    { 
        int c = 0;
        String result = "";
        while(c <x.length())
        {
            if(c < corte)
                result = result + x.charAt(c);
            else
                result = result + y.charAt(c);
            c++;
        }
        return result;
    }
    
    public boolean VerificarNumero(int x) 
    {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 6; j++) {
                if (m.getElem(i, j) != x) {
                    return true;
                }
                else{
                return false;}
            }
        }
        return false;
    }
    
    public void cargar_matriz()
    {
        int f = 8;
        int c = 5;
        int emp = 8;
        m.setFil(f);
        m.setCol(c);
        Random ran = new Random();
            for (int i = 0; i < 8; i++) 
            {
                int x = ran.nextInt(127);
                if (VerificarNumero(x) && x >63){
                    m.setElem(i+1, i, 0);
                    m.setElem(ConvertBin(x), i, 1);
                    m.setElem(x, i, 2);
                    m.setElem(x*x, i, 3);
                    m.setElem(emp, i, 4);
                    emp--;
                } else
                    i--;
            }
    }
    
    public boolean revisar_ganador()
    {
        int i=0;
        int x =m.getElem(0, 2);
        while(i<m.getFil())
        {
            if(m.getElem(i, 2)!= x)
            {
                return false;
            }
            else
            {
                i++;
            }
        }
        return true;
    }
    
    public void mostrar_matriz( Matriz m )
    {
        int f = m.getFil();
        int c = m.getCol();
        for (int i =0; i < f; i++ ){
            for ( int j = 0 ; j < c ; j++ ){
               //jTextArea1.setText( (jTextArea1.getText() + "  " + String.valueOf(m.getElem(i, j)) ));
                tabla.setValueAt(m.getElem(i, j), i, j); 
                }
            }
    }
   
    public void vaciar_tabla1()
    {
        for (int i =0; i < 8; i++ ){
            for ( int j = 0 ; j < 5 ; j++ ){
               //jTextArea1.setText( (jTextArea1.getText() + "  " + String.valueOf(m.getElem(i, j)) ));
                tabla.setValueAt(" ", i, j); 
                }
            }
    }
    
        public void vaciar_tabla2()
    {
        for (int i =0; i < 8; i++ ){
            for ( int j = 0 ; j < 5 ; j++ ){
               //jTextArea1.setText( (jTextArea1.getText() + "  " + String.valueOf(m.getElem(i, j)) ));
                tabla2.setValueAt(" ", i, j); 
                }
            }
    }
    
    public void cargar_ganadores()
    {
        int f = 8;
        int c = 5;
        int emp = 8;
        int cont = 0; //para comparar con la matriz primero ultimo   cont - emp
        int numfil = 1; //carga impares   y numera las filas
        int i=0;        //carga pares
        int cpar=8;
        int cimpar=6;
        mat.setFil(f);
        mat.setCol(c);
        while(i<8) 
        {            
            //definir emparejamientos todos con todos
            if(cont == 1)
            {
                cpar = 7;
                cimpar = 5;     
            }
            if(cont == 2)
            {
                cpar = 4;
                cimpar = 2;
            }
            if(cont == 3)
            {
                cpar = 3;
                cimpar = 1;
            }
            mat.setElem(numfil, i, 0);
            mat.setElem(ConvertBin(mayor(m.getElem(cont, 2),m.getElem(emp-1,2))),i,1);
            mat.setElem(mayor(m.getElem(cont, 2),m.getElem(emp-1,2)), i, 2);
            mat.setElem(cpar, i, 3);
            mat.setElem(numfil+1, numfil, 0);
            mat.setElem(ConvertBin(mayor(m.getElem(cont, 2),m.getElem(emp-1,2))),numfil,1);
            mat.setElem(mayor(m.getElem(cont, 2),m.getElem(emp-1,2)), numfil,2);
            mat.setElem(cimpar, numfil, 3);
            numfil = numfil + 2;
            i = i +2;
            emp--;
            cont++;
        }
        //definir cortes
        mat.setElem(2, 0, 4);
        mat.setElem(3, 1, 4);
        mat.setElem(1, 2, 4);
        mat.setElem(4, 3, 4);
        mat.setElem(4, 4, 4);
        mat.setElem(3, 5, 4);
        mat.setElem(1, 6, 4);
        mat.setElem(2, 7, 4);
    }
    
    public void mostrar_ganadores(Matriz m)
    {
        int f = m.getFil();
        int c = m.getCol();
        for (int i =0; i < f; i++ ){
            for ( int j = 0 ; j < c ; j++ ){
               //jTextArea1.setText( (jTextArea1.getText() + "  " + String.valueOf(m.getElem(i, j)) ));
                tabla2.setValueAt(m.getElem(i, j), i, j); 
                }
            }
    }
    
    public void cargar_resultado()
    {        
        int f = 8;
        int c = 4;
        int i=0;        //carga pares
        m.setFil(f);
        m.setCol(c);
        m.setElem(Integer.parseInt(realizar_corte(2, String.valueOf(mat.getElem(0, 1)), String.valueOf(mat.getElem(7, 1)))),0,1);
        m.setElem(Integer.parseInt(realizar_corte(3, String.valueOf(mat.getElem(1, 1)), String.valueOf(mat.getElem(5, 1)))),1,1);
        m.setElem(Integer.parseInt(realizar_corte(1, String.valueOf(mat.getElem(2, 1)), String.valueOf(mat.getElem(6, 1)))),2,1);
        m.setElem(Integer.parseInt(realizar_corte(4, String.valueOf(mat.getElem(3, 1)), String.valueOf(mat.getElem(4, 1)))),3,1);
        m.setElem(Integer.parseInt(realizar_corte(2, String.valueOf(mat.getElem(7, 1)), String.valueOf(mat.getElem(0, 1)))),4,1);
        m.setElem(Integer.parseInt(realizar_corte(3, String.valueOf(mat.getElem(5, 1)), String.valueOf(mat.getElem(1, 1)))),5,1);
        m.setElem(Integer.parseInt(realizar_corte(1, String.valueOf(mat.getElem(6, 1)), String.valueOf(mat.getElem(2, 1)))),6,1);
        m.setElem(Integer.parseInt(realizar_corte(4, String.valueOf(mat.getElem(4, 1)), String.valueOf(mat.getElem(3, 1)))),7,1);
        while(i<8) 
        {   
            m.setElem(i+1, i, 0);
            m.setElem(ConvertDec(m.getElem(i, 1)), i, 2);
            m.setElem((m.getElem(i, 2))*(m.getElem(i, 2)), i, 3);
            i++;
        }
    }
         
    public void vaciar_matriz()
    {
        m.setFil(0);
        m.setCol(0);
    }
    
    public void vaciar_ganadores()
    {
        mat.setFil(0);
        mat.setCol(0);
    }
    
    public int encontrar_resultado()
    {
        int i=0;
        int aux=0;
        while(i<m.getCol())
        {
            if(mayor(i,2)>aux)
            {
                aux=m.getElem(i, 2);
            }
            i++;
        }
        return aux;
    }
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Botones">
    
    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
        vaciar_matriz();
        cargar_matriz();
        mostrar_matriz(m);
    }//GEN-LAST:event_button1ActionPerformed

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        // TODO add your handling code here:
//        if(revisar_ganador())
//        {
//            JOptionPane.showMessageDialog(this, "el valor maximo que se encontro es " + m.getElem(0, 2) + " con un " + porcentaje()+"% de efectividad");
//        }
        if(!vacio(m)==true)
        {
            vaciar_ganadores();
            cargar_ganadores();
            mostrar_ganadores(mat);
        }
        else{
            JOptionPane.showMessageDialog(this, "Primero debe generar la poblacion");
        }
    }//GEN-LAST:event_button2ActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        // TODO add your handling code here:
        c++;
        if(!vacio(mat))
        {
            vaciar_matriz();
            cargar_resultado();
            mostrar_matriz(m);
        }
        else{
            JOptionPane.showMessageDialog(this, "Primero debe generar los ganadores");
        }
        if(c==3)
        {
            JOptionPane.showMessageDialog(this, "ya se hicieron las 3 vueltas");
            JOptionPane.showMessageDialog(this,"el valor maximo que se encontro es " + encontrar_resultado() + " con un " + porcentaje()+"% de efectividad");
        }
        
    }//GEN-LAST:event_button3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        vaciar_tabla1();    
        vaciar_tabla2();
        vaciar_matriz();
        vaciar_ganadores();
        c=0;
    }//GEN-LAST:event_jButton1ActionPerformed

    //</editor-fold>
    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Algoritmo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Algoritmo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Algoritmo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Algoritmo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Algoritmo().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Button button2;
    private java.awt.Button button3;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabla;
    private javax.swing.JTable tabla2;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
}
